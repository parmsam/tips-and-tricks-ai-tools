[
  {
    "objectID": "uses.html#memory-aid",
    "href": "uses.html#memory-aid",
    "title": "\n2¬† Uses\n",
    "section": "\n2.1 Memory aid",
    "text": "2.1 Memory aid\nObtain list of possible mnemonics to help memorize a concept. These could be an acronym or funny story. Alternatively, you could ask for a description to help you map the information into your memory palace. This can be helpful when you need to remember new programming concepts so you can code faster.\nGive me a list of 5 memory devices to remember\n$ vs ^ in regular expressions\nDollar Sign \"Catcher\":\nRemember that the dollar sign ($) catches the end of the line in regular expressions. \"Catcher\" and \"end\" both have the letter \"E\" in them, which can help you remember.\n\n\"Carat Starts\":\nThe carat symbol (^) resembles an upward-pointing arrow, pointing to the start of the line. It's like an arrow showing you the way to the beginning of the line.\n\nCarat to Ceiling, Dollar to Down:\nAssociate the shape of the ^ (caret) to ceiling and $ (dollar) to down or the floor. This way you remember the caret matches the start (top/ceiling) and the dollar matches the end (bottom/down).\n\n\"$\" at the End of a Price:\nWhen we list prices, we often write the dollar sign at the end (especially in some non-English-speaking countries). So, the dollar sign can remind you of the end of the line.\n\nAlphabetical Order:\nIn terms of alphabetical order, Carat comes before Dollar. This can be associated with the order in a line: Carat (^) represents the start (before), and Dollar ($) represents the end (after)."
  },
  {
    "objectID": "uses.html#notetaking",
    "href": "uses.html#notetaking",
    "title": "\n2¬† Uses\n",
    "section": "\n2.2 Notetaking",
    "text": "2.2 Notetaking\nMarkdown files are a useful file format for notetaking. They‚Äôre text files so they can be easily version controlled and shared. I personally love the Obsidian flavor of Markdown. What‚Äôs nice about the format is that you can link notes together and gain access to a large library of open-source community plugins. The key here is that you can also open the file format in VS Code and activate Github Copilot as a notetaking assistant This is very useful for autocompleting, rewriting, or summarizing notes. Alternatively, Microsoft 365 Copilot in OneNote can serve a similar role."
  },
  {
    "objectID": "uses.html#transforming-information",
    "href": "uses.html#transforming-information",
    "title": "\n2¬† Uses\n",
    "section": "\n2.3 Transforming information",
    "text": "2.3 Transforming information\nSummarize educational content into a list of bullet points or table. Content be a video transcript or an article. Or you could go in the opposite direction and ask for a description of a table or set of bullet points.\nHere's the transcript from a Youtube video I just saw. Give me a short summary of in 4 bullet points:\n\nWe're no strangers to love\nYou know the rules and so do I (do I)\nA full commitment's what I'm thinking of\nYou wouldn't get this from any other guy\nI just wanna tell you how I'm feeling\nGotta make you understand\nNever gonna give you up\nNever gonna let you down\nNever gonna run around and desert you\nNever gonna make you cry\n- The lyrics are from the song \"Never Gonna Give You Up\" by Rick Astley.\n- The song talks about a person's commitment and dedication to their loved one.\n- The singer emphasizes that they will never give up, let down, or hurt their partner.\n- The overall message is about reassurance, trust, and the desire to make their loved one happy.\n\n2.3.1 Generate diagrams\nVisualize code, relationships or project info as a diagrams or charts in Mermaid.\nGive me an accurate Mermaid flow chart for this R code: \nfor (i in 1:10) {\n  if (i &lt; 3) \n    next\n  print(i)\n  if (i &gt;= 5)\n    break\n}\n\ngraph TD\n    Start(Start)\n    ForLoop[For i in 1:10]\n    Condition1{i &lt; 3}\n    Next[Next iteration]\n    Print[Print i]\n    Condition2{i &gt;= 5}\n    Break[Break loop]\n    End(End)\n    \n    Start --&gt; ForLoop\n    ForLoop --&gt; Condition1\n    Condition1 -- Yes --&gt; Next\n    Condition1 -- No --&gt; Print\n    Print --&gt; Condition2\n    Condition2 -- Yes --&gt; Break\n    Break --&gt; End\n    Condition2 -- No --&gt; ForLoop\n    Next --&gt; ForLoop\n\n\n\ngraph TD\n    Start(Start)\n    ForLoop[For i in 1:10]\n    Condition1{i &lt; 3}\n    Next[Next iteration]\n    Print[Print i]\n    Condition2{i &gt;= 5}\n    Break[Break loop]\n    End(End)\n    \n    Start --&gt; ForLoop\n    ForLoop --&gt; Condition1\n    Condition1 -- Yes --&gt; Next\n    Condition1 -- No --&gt; Print\n    Print --&gt; Condition2\n    Condition2 -- Yes --&gt; Break\n    Break --&gt; End\n    Condition2 -- No --&gt; ForLoop\n    Next --&gt; ForLoop"
  },
  {
    "objectID": "uses.html#add-emojis-as-visual-aids-into-text",
    "href": "uses.html#add-emojis-as-visual-aids-into-text",
    "title": "\n2¬† Uses\n",
    "section": "\n2.4 Add emojis as visual aids into text",
    "text": "2.4 Add emojis as visual aids into text\nAsk the AI tool to include relevant emojis within the requested content. These emojis can serve as nice visual aids to written content like notes or documentation.\nSteps to make a PBJ sandwich. \nAdd helpful emojis into steps. \n\nSure, here are the steps to make a PBJ sandwich with emojis:\n\n1. ü•™ Gather your supcplies: two slices of bread, peanut butter, jelly, and a knife. üçû\n2. ü•ú Spread peanut butter on one slice of bread. ü•™\n3. ü•ú Wash the knife. üßº\n4. üçì Spread jelly on the other slice of bread. ü•™\n5. ü•™ Put the two slices of bread together, peanut butter and jelly sides facing each other. ü•™\n6. ‚úÇÔ∏è Cut the sandwich in half. ü•™\n7. ü•™ Enjoy! üòã"
  },
  {
    "objectID": "uses.html#unit-testing",
    "href": "uses.html#unit-testing",
    "title": "\n2¬† Uses\n",
    "section": "\n2.5 Unit testing",
    "text": "2.5 Unit testing\nProvide function(s) in your prompt and ask for unit tests. This is useful for package development or data analyses involving custom functions.\nGive me unit tests for the following R function using \nthe testthat package: \n`\nis_over_9000 &lt;- function(x){\n  stopifnot(is.numeric(x))\n  x &gt; 9000\n}\n`\n\nis_over_9000 &lt;- function(x){\n  stopifnot(is.numeric(x))\n  x &gt; 9000\n}\nlibrary(testthat)\ntest_that(\"is_over_9000 works correctly\", {\n  # Test case 1: x &gt; 9000\n  expect_true(is_over_9000(9001))\n  # Test case 2: x &lt;= 9000\n  expect_false(is_over_9000(9000))\n  expect_false(is_over_9000(1))\n  expect_false(is_over_9000(-9001))\n  # Test case 3: x is not numeric\n  expect_error(is_over_9000(\"not_a_number\"))\n  expect_error(is_over_9000(NULL))\n  expect_error(is_over_9000(c(1, \"a\")))\n})"
  },
  {
    "objectID": "uses.html#regular-expressions",
    "href": "uses.html#regular-expressions",
    "title": "\n2¬† Uses\n",
    "section": "\n2.6 Regular expressions",
    "text": "2.6 Regular expressions\nGet a regular expression for pattern matching. Share an example string and the subset you would like to capture then ask for a pattern to match for it. Ensure that you create or obtain one or more unit tests to confirm it is working as expected.\nRegex pattern in R that looks for function names that are \nnot prefixed by package name. For example it should not \ndetect `dplyr::count(iris, Species)` or \n`dplyr::glimpse(iris)`\nYou can use the following regex pattern in R to look for function names that are not prefixed by a package name:\n\n`\\b(?&lt;!\\w::)\\w+\\(`\n\nExplanation:\n\n\\b: Matches a word boundary to ensure the match is a whole word.\n(?&lt;!\\w::): Negative lookbehind to assert that there is no word character before ::, which indicates a package prefix.\n\\w+: Matches one or more word characters, representing the function name.\n\\(: Matches the opening parenthesis to complete the function call."
  },
  {
    "objectID": "uses.html#commenting-code",
    "href": "uses.html#commenting-code",
    "title": "\n2¬† Uses\n",
    "section": "\n2.7 Commenting code",
    "text": "2.7 Commenting code\nAdd beacons or useful comments into existing code. Beacons are parts of a script that can help a programmer understand what the code does. These could be as a simple, one-line comment explaining a section of code or a function. Alternatively, they could be variables using words that help explain what the code is doing. This could mean variables like tree or root for a code involving a binary tree.\nAdd short comments after each line in the R code explaining what is going on:\nflights |&gt; \n  filter(dest == \"IAH\") |&gt; \n  mutate(speed = distance / air_time * 60) |&gt; \n  select(year:day, dep_time, carrier, flight, speed) |&gt; \n  arrange(desc(speed))\n\nlibrary(nycflights13)\nlibrary(dplyr)\n# Pipe operator (|&gt;) is used to chain functions together for data manipulation.\n# Filter rows where the 'dest' column is equal to \"IAH\".\nflights |&gt; \n  filter(dest == \"IAH\") |&gt; \n# Calculate the 'speed' column by dividing 'distance' by 'air_time' and then multiplying by 60 to convert to minutes.\n  mutate(speed = distance / air_time * 60) |&gt; \n# Select specific columns 'year' to 'day', 'dep_time', 'carrier', 'flight', and the newly calculated 'speed'.\n  select(year:day, dep_time, carrier, flight, speed) |&gt; \n# Arrange the rows in descending order based on the 'speed' column.\n  arrange(desc(speed))"
  },
  {
    "objectID": "uses.html#explain-concepts",
    "href": "uses.html#explain-concepts",
    "title": "\n2¬† Uses\n",
    "section": "\n2.8 Explain concepts",
    "text": "2.8 Explain concepts\nAsk to explain a new concept you are learning in a format of interest or style of interest. This is useful when there‚Äôs a lot of technical jargon or acronyms you don‚Äôt understand in a piece of text.\nExplain how programmers typically use regular expressions. \nGive me a few  situations where it might be applied. \nExplain this to me in the style of Robert Dinero and keep it short.\nHey, you talkin' to me? Alright, let me break it down for you. We got these things called regular expressions, or regex for short. Think of them like a matchmaker for data. Programmers use 'em to find, replace, or manipulate strings of text in data, you follow? \n\nNow, I'm talking about situations like validating input fields. Yeah, like checking if an email address or phone number entered by a user is legit. Or let's say you got a huge text file, a real tome, and you need to find specific patterns or keywords in there, that's when regex comes in handy. \n\nAlso, consider renaming a bulk of files, or parsing logs. Big headache, right? Not with regex, it's a piece of cake. These things are versatile, you get me? So next time you got a mountain of data to deal with, remember regular expressions, capisce?"
  },
  {
    "objectID": "uses.html#write-code",
    "href": "uses.html#write-code",
    "title": "\n2¬† Uses\n",
    "section": "\n2.9 Write code",
    "text": "2.9 Write code\nAsk for help to write code and automate repetitive coding tasks. The key is to provide an accurate technical specification for the tool to work with. In other cases, you could get an example on how to do something, similar to a tutorial, then apply it to your situation.\nShow me how to read a set of CSV files from a folder in R using list.files(), readr::read_csv(), and the purrr package. \nSet the element names as the csv file names. \nNote that I dont want to change the working directory and dont want to set the element names at the full file paths.\n\n# Load required libraries\nlibrary(readr)\nlibrary(purrr)\n\n# Specify the folder path where the CSV files are located\nfolder_path &lt;- \"/path/to/your/folder\"\n\n# Get a list of CSV files in the folder\ncsv_files &lt;- list.files(path = folder_path, pattern = \"\\\\.csv$\", full.names = TRUE)\n\n# Read CSV files and set element names\ncsv_data_list &lt;- set_names(map(csv_files, read_csv), basename(csv_files))\n\n# Now, csv_data_list is a named list where each element contains the data from the corresponding CSV file.\n# The names of the elements are set to the CSV file names without the full file paths.\n\nYou could then ask ChatGPT to format responses into templates that you can fill in the blanks with ( (using ____ as blanks for you to edit). This is useful when you want to write code but are not sure of the exact syntax or the exact parameters to use.\n\n2.9.1 Create simple apps\nAsk for help to create simple apps. This is useful when you want to create an app but are not sure of the exact syntax or the exact arguments to use. You can generate a simple example to then start building a more complex app.\nCreate a simple Shiny for R app that  displays uploaded CSV data as a DT table that you can build off of\n\n# app.R\nlibrary(shiny)\nlibrary(DT)\nui &lt;- fluidPage(\n  titlePanel(\"Upload CSV and Display as DT Table\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"file\", \"Choose CSV File\",\n                accept = c(\n                  \"text/csv\",\n                  \"text/comma-separated-values,text/plain\",\n                  \".csv\")\n      ),\n      tags$hr(),\n      checkboxInput(\"header\", \"Header\", TRUE)\n    ),\n    \n    mainPanel(\n      DTOutput(\"table\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$table &lt;- renderDT({\n    inFile &lt;- input$file\n    \n    if (is.null(inFile)) {\n      return(NULL)\n    }\n    \n    # Read the uploaded CSV\n    data &lt;- read.csv(inFile$datapath, header = input$header)\n    \n    # Return the datatable\n    datatable(data, options = list(pageLength = 25))\n  })\n}\n\nshinyApp(ui, server)\n\nClick here to interact with the example Shiny app that displays an uploaded CSV data as a DT table."
  },
  {
    "objectID": "uses.html#debug-code",
    "href": "uses.html#debug-code",
    "title": "\n2¬† Uses\n",
    "section": "\n2.10 Debug code",
    "text": "2.10 Debug code\nGet help to identify, understand, or fix problems in your code. Here it helps to define expectations.\nHelp me debug this R code and keep it short:\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) %&gt;%\n  geom_point(aes(color = species, shape = island))\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = island))"
  },
  {
    "objectID": "uses.html#explain-code",
    "href": "uses.html#explain-code",
    "title": "\n2¬† Uses\n",
    "section": "\n2.11 Explain code",
    "text": "2.11 Explain code\nGet explanations for blocks of code that you may have difficulty understanding.\nExplain the following code to me. Keep it short:\nstringr::str_view(words, \"^[^aeiou]+$\")\nThe code uses the stringr package in R to find and display non-vowel words in the words string. \nIt uses str_view function to visually highlight (view) the non-vowel words that match the regex pattern \"^[^aeiou]+$\". \nThe regex pattern means it will match any string that consists entirely of characters that are not vowels (i.e., only consonants)."
  },
  {
    "objectID": "uses.html#get-feedback",
    "href": "uses.html#get-feedback",
    "title": "\n2¬† Uses\n",
    "section": "\n2.12 Get feedback",
    "text": "2.12 Get feedback\nGet suggestions or feedback on your code or writing. Maybe you want some ideas on how you can improve readability or performance.\nGive me suggestions and feedback on this R code:\n\na &lt;- 11:14\nb &lt;- 26:29\nc &lt;- numeric(length(a))\nfor(i in seq_along(a)) {\n      c[i] &lt;- a[i] + b[i]\n}\nYour R code snippet is generally well-written and should accomplish its goal of adding corresponding elements in vectors a and b and storing them in vector c. However, there are some improvements and best practices you might consider:\n\nSuggestions:\nComments: Adding comments to your code helps improve its readability and maintainability.\nVectorization: R is optimized for vectorized operations, and using a for loop for element-wise addition is less efficient than using vectorized operations.\nPre-allocation: You've already done this by pre-allocating c using numeric(length(a)), which is good practice in R to speed up the loop.\nCheck for Equal Lengths: Before performing operations on two vectors, you might want to ensure they have the same length to avoid unexpected results or errors.\n\nImproved Code:\nHere's how you might rewrite your code with these considerations:\n\n# Ensure both vectors have the same length\nif(length(a) != length(b)) {\n  stop(\"Vectors a and b must have the same length\")\n}\n\n# Perform element-wise addition using vectorized operations\nc &lt;- a + b\n\nAs you can see, I've replaced the for loop with a vectorized operation (`a + b`), which is more efficient and easier to read. I've also added a check to make sure that the lengths of `a` and `b` are the same before performing the addition."
  },
  {
    "objectID": "uses.html#brainstorm-ideas",
    "href": "uses.html#brainstorm-ideas",
    "title": "\n2¬† Uses\n",
    "section": "\n2.13 Brainstorm ideas",
    "text": "2.13 Brainstorm ideas\nGet ideas for a project or a problem you are working on. This is useful when you are stuck and need some inspiration. You can use this to help you mindmap.\nGive me a list of 5 possible titles for a short book on AI Assistant tools.\nCertainly! Here are five possible titles for a short book on AI Assistant tools:\n\n1. \"Mastering the Virtual Assistant: A Guide to AI-Powered Tools\"\n2. \"Speak, Command, Achieve: Unlocking the Potential of AI Assistants\"\n3. \"AI Assistants Demystified: Your Pocket Guide to the Future\"\n4. \"Hey Siri, Write My Book: Exploring the World of AI Assistants\"\n5. \"Voice of the Future: How AI Assistants are Changing Our Lives\"\n\nFeel free to adjust these titles to better fit the specific angle or approach of your book!"
  },
  {
    "objectID": "uses.html#refactor-code",
    "href": "uses.html#refactor-code",
    "title": "\n2¬† Uses\n",
    "section": "\n2.14 Refactor code",
    "text": "2.14 Refactor code\nRefactor your code that may be inefficient or unnecessarily complicated. For example, maybe you are defaulting to looping structures like for or while loops when you could be using vectorized solutions.\nRefactor this R code to take advantage of vectorization:\nx &lt;- 1:5\ny &lt;- 10:15\noutput_vector &lt;- c()\nfor (i in 1:length(x)) {\n  output_vector[i] &lt;- x[i] + y[i]\n}\noutput_vector\n\nx &lt;- 1:5\ny &lt;- 10:15\noutput_vector &lt;- x + y\noutput_vector"
  },
  {
    "objectID": "uses.html#reformat-code",
    "href": "uses.html#reformat-code",
    "title": "\n2¬† Uses\n",
    "section": "\n2.15 Reformat code",
    "text": "2.15 Reformat code\nRearrange code so that it is more readable and understandable.\nReformat this R code so that is more readable and follows good R conventions:\n1+            1\nx=1:10#some users prefer '&lt;-' as the assignment operator\nif(TRUE){\nprint('Hello world!') # HI!\n}\n\n# Adding two numbers\nresult &lt;- 1 + 1\n\n# Creating a sequence from 1 to 10\nx &lt;- 1:10 # some users prefer '&lt;-' as the assignment operator\n\n# Conditional statement with a print statement\nif (TRUE) {\n  print('Hello world!') # HI!\n}"
  },
  {
    "objectID": "uses.html#reverse-prompt-engineering",
    "href": "uses.html#reverse-prompt-engineering",
    "title": "\n2¬† Uses\n",
    "section": "\n2.16 Reverse prompt engineering",
    "text": "2.16 Reverse prompt engineering\nYou can an output and generating a prompt that would produce something resembling that output. This is useful if you have a reference output on hand but don‚Äôt know how to get there.\nGive me a prompt to generate text resembling this persona: \n\"You talkin‚Äô to me? You talkin‚Äô to me?\"\nCertainly! If you're looking to generate text in the persona of a character who famously says, \"You talkin' to me? You talkin' to me?\", you're likely channeling the vibe of Travis Bickle from the movie \"Taxi Driver.\" Here's a writing prompt to help you generate text in that persona:\n\nWriting Prompt:\n\nYou're Travis Bickle, a taxi driver in New York City. It's late at night, and you've just picked up a passenger who seems a bit sketchy. They ask you to take them to a location that's notorious for illegal activities. As you drive, you start talking to yourself, contemplating the morality of your actions and the state of the world around you. What do you say?\n\nFeel free to use this prompt to generate text that captures the essence of this persona."
  },
  {
    "objectID": "uses.html#compare-text-or-code",
    "href": "uses.html#compare-text-or-code",
    "title": "\n2¬† Uses\n",
    "section": "\n2.17 Compare text or code",
    "text": "2.17 Compare text or code\nExplain differences between two bodies of text or snippets of code. Here‚Äôs an example of comparing two code snippets.\nCompare the following two R code snippets and explain the differences:\n# Code snippet 1\nx &lt;- 1:5\ny &lt;- 10:15\noutput_vector &lt;- c()\nfor (i in 1:length(x)) {\n  output_vector[i] &lt;- x[i] + y[i]\n}\noutput_vector\n\n# Code snippet 2\nx &lt;- 1:5\ny &lt;- 10:15\noutput_vector &lt;- x + y\noutput_vector\nBoth code snippets aim to perform element-wise addition of two vectors `x` and `y` and store the result in `output_vector`. However, there are some notable differences:\n\n### Code snippet 1\n\n1. **Explicit Loop**: This snippet uses a `for` loop to iterate over each element in the vectors `x` and `y`. In each iteration, the loop adds the corresponding elements from the vectors and stores them in `output_vector`.\n2. **Length Calculation**: The length of the vectors is calculated explicitly with `length(x)`.\n3. **Memory Allocation**: An empty vector `output_vector &lt;- c()` is initialized, and elements are filled in one by one in the loop.\n4. **Error-prone**: If `x` and `y` have different lengths, this code will still run but may produce incorrect or unexpected results.\n5. **Less Efficient**: Explicit loops in R are generally slower compared to vectorized operations.\n\n### Code snippet 2\n\n1. **Vectorized Operation**: This snippet uses R's built-in vectorized addition (`x + y`), which is more concise and generally more efficient.\n2. **Implicit Length Handling**: The operation automatically handles the lengths of the vectors, without the need to explicitly calculate them.\n3. **Memory Allocation**: The vector `output_vector` is created and filled in one line, making the code more concise.\n4. **Less Error-prone**: If `x` and `y` have different lengths, R will still execute the code by recycling elements of the shorter vector to match the length of the longer one. While this could also lead to unexpected results, it is a feature of R's vectorized operations.\n\nIn summary, the second snippet is more idiomatic, concise, and efficient for this kind of simple element-wise operation in R."
  },
  {
    "objectID": "uses.html#support-independent-replication",
    "href": "uses.html#support-independent-replication",
    "title": "\n2¬† Uses\n",
    "section": "\n2.18 Support independent replication",
    "text": "2.18 Support independent replication\nAI assistance tools could aid validation programmers or replicators in speeding up independent replication time. This is relevant in the pharma industry for clinical trial reporting, but could also be useful broadly in academia for internal or external replication of code. In the future, one could imagine a code validation LLM tool that could run in parallel or as a replacement to the validation programmers. This needs to be approached with care to ensure the production and validation programmer are not using an AI assistance tool for their work which may lead to errors being missed in the validation process."
  },
  {
    "objectID": "uses.html#translate-from-language-to-language",
    "href": "uses.html#translate-from-language-to-language",
    "title": "\n2¬† Uses\n",
    "section": "\n2.19 Translate from language to language",
    "text": "2.19 Translate from language to language\nConvert code from one language to another. Of course, here you want to ensure you have unit tests in place and the ability to understand both languages.\nConvert the following R code into python using \npackages like pandas or numpy:\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60\n  )\n\nimport pandas as pd\n\n# Assuming you have a DataFrame called 'flights'\nflights['gain'] = flights['dep_delay'] - flights['arr_delay']\nflights['speed'] = flights['distance'] / flights['air_time'] * 60"
  },
  {
    "objectID": "uses.html#write-documentation",
    "href": "uses.html#write-documentation",
    "title": "\n2¬† Uses\n",
    "section": "\n2.20 Write documentation",
    "text": "2.20 Write documentation\nExplain what kind of R package or analysis you are working on then ask the AI tool to create a README.md template for an R package. Additionally, you could use it to create in-line documentation as comments for your functions. This is commonly done in R using the roxygen2 package.\nGive me a roxygen2 header for this R function to \nredact email addresses from a string: \n\nredact_email_addresses &lt;- function(\ntext, \nreplace_with = NULL) {\n    pattern &lt;-\n      \"\\\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}(?:\\\\.[A-Za-z]{2,})?\\\\b\"\n    redact_pattern(text, pattern, replace_with)\n}\n\n#' Redact email addresses from a string.\n#'\n#' This function searches for email addresses in the input text and replaces them with the specified 'replace_with' value if provided, otherwise redacts them.\n#'\n#' @param text The input text containing email addresses to be redacted.\n#' @param replace_with A character string used to replace the found email addresses. If set to NULL (default), the email addresses will be redacted.\n#' @return The text with email addresses redacted or replaced.\n#' @importFrom stringr str_replace_all\n#' @export\n#' @examples\n#' redact_email_addresses(\"Contact us at john.doe@example.com or jane.smith@example.com\", \"[email]\")\n#' redact_email_addresses(\"Email support: support@example.com\", \"REDACTED\")\n#' redact_email_addresses(\"No emails here!\")\n#'\n#' @seealso \\code{\\link[stringr]{str_replace_all}}\n#' @keywords redact email addresses\nredact_email_addresses &lt;- function(\n  text,\n  replace_with = NULL\n) {\n  pattern &lt;- \"\\\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}(?:\\\\.[A-Za-z]{2,})?\\\\b\"\n  redact_pattern(text, pattern, replace_with)\n}"
  },
  {
    "objectID": "uses.html#write-articles",
    "href": "uses.html#write-articles",
    "title": "\n2¬† Uses\n",
    "section": "\n2.21 Write articles",
    "text": "2.21 Write articles\nBlog posts provide a useful medium to share projects and results. Additionally, vignettes serve as long form guides to using an package. Both are common for R and can serve as useful training materials to orient new users to custom software. With enough context and careful prompting, ChatGPT can help provide such types of articles. See this repo for an example of an R package generated primarily (including the README and vignettes) using ChatGPT."
  },
  {
    "objectID": "uses.html#write-a-professional-email",
    "href": "uses.html#write-a-professional-email",
    "title": "\n2¬† Uses\n",
    "section": "\n2.22 Write a professional email",
    "text": "2.22 Write a professional email\nProvide an informal email or message to the AI tool and ask the tool to make it professional based on the intended audience or recipient.\nPlease update the following email to ensure it is business \nprofessional: \n`\nSubject: Hey! Long Time No Talk!\n\nHey [Friend's Name],\n\nHow've you been? It feels like ages since we caught up. How's everything on your end?\n\nLet's grab coffee sometime soon. I miss our chats!\n\nTake care,\n[Your Name]\n\nFeel free to adapt it as you see fit!\n`\nSubject: Reconnecting to Discuss Ongoing Projects and Industry Developments\n\nDear [Colleague's Name],\n\nI hope this email finds you well. It has been some time since we last connected, and I am eager to catch up on your recent accomplishments and the progress of your ongoing projects.\n\nWould you be interested in scheduling a meeting to discuss industry trends and potential collaborative opportunities? A coffee catch-up would be an excellent way to facilitate this discussion.\n\nPlease let me know your availability for the coming weeks, and I would be happy to coordinate a meeting accordingly.\n\nThank you for your time, and I look forward to reconnecting soon.\n\nBest regards,\n[Your Name]\n[Your Position]"
  },
  {
    "objectID": "uses.html#naming-things",
    "href": "uses.html#naming-things",
    "title": "\n2¬† Uses\n",
    "section": "\n2.23 Naming things",
    "text": "2.23 Naming things\n\nThere are only two hard things in Computer Science: cache invalidation and naming things. ‚Äì Phil Karlton\n\nWell, AI tools can help you name things. For example, you could ask the AI tool to provide you could share the intended purpose for the function you‚Äôre working on then ask the AI tool for one or more informative function names.\nGive me 5 possible names for an function that creates a \nhex sticker from a reference image. Use snake case \nfor the names. Keep it at three words max.\ncreate_hex_sticker\ngenerate_hex_sticker\nmake_hex_sticker\nbuild_hex_sticker\ndesign_hex_sticker"
  },
  {
    "objectID": "uses.html#generate-art-for-a-logo",
    "href": "uses.html#generate-art-for-a-logo",
    "title": "\n2¬† Uses\n",
    "section": "\n2.24 Generate art for a logo",
    "text": "2.24 Generate art for a logo\nAI tools like DALLE can be used to get creative artwork for later use as book cover art or a hex sticker.\nUkrainian dog wearing a beret and black turtleneck\n\n\n\n\n\ncover art\n\n\n\n\n\nhex sticker\n\n\n\nFigure¬†2.1: The best doge\n\n\nUsing a package from my person utility package to generate the hex sticker.\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"parmsam/psam\")\nlibrary(psam)\ngen_hex_sticker(\n  ref_image = \"images/DALL¬∑E 2023-07-17 23.32.52 - Ukrainian dog wearing a beret and black turtleneck.png\",\n  file_name = \"images/hex2.png\",\n  pkg_name = \"bestdoge\",\n  txt_main_color = \"white\"\n)\n\nAlternatively, there is now a ChatGPT plugin for Canva to identify relevant Canva templates which can then be edited and downloaded."
  },
  {
    "objectID": "uses.html#summary",
    "href": "uses.html#summary",
    "title": "\n2¬† Uses\n",
    "section": "\n2.25 Summary",
    "text": "2.25 Summary\nIn this chapter, we explored a bunch of ways to use AI tools to help you learn, create, and share. You learned that these tools can help you name things, write code, and even generate art. The key is to be creative and think outside the box. Combine ideas from this chapter or other materials to create your own unique workflows. Most importantly, be sure to read and verify the output from these tools. I hope you found this post useful and that it inspires you to try out some of these ideas."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AI Assistants Maximized",
    "section": "",
    "text": "Preface\nThis is a guide book with tips and tricks for use of AI tools such as ChatGPT, Bard, Github Copilot or DALL-E. It collects different use cases that I‚Äôve run into as a programmer or just thought of for fun. Example prompts are provided with most of the use cases. The example outputs are primarily generated using ChatGPT‚Äôs GPT-4 model. This book is created using Quarto. It‚Äôs hosted on Github pages, with the source code available on Github. Please consider starring the Github repository if you find this book useful."
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "AI Assistants Maximized",
    "section": "Prerequisites",
    "text": "Prerequisites\nThe book assumes you already have access to one or more of the already specified AI tools or a variant of them."
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "AI Assistants Maximized",
    "section": "Contributing",
    "text": "Contributing\nIf you have any suggestions, please feel free to open an issue or pull request on Github."
  },
  {
    "objectID": "shiny.html",
    "href": "shiny.html",
    "title": "Appendix A ‚Äî Shiny example",
    "section": "",
    "text": "Wait a minute or two for it to load in your browser‚Ä¶\nHere‚Äôs a dataset for you to try the app with:\n\n\n\n Download data\n\n\n\n#| standalone: true\n#| viewerHeight: 500\n#| components: [viewer]\nwebr::install(\"DT\")\n\nlibrary(shiny)\nlibrary(DT)\n\nui &lt;- fluidPage(\n  titlePanel(\"Upload CSV and Display as DT Table\"),\n\n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"file\", \"Choose CSV File\",\n                accept = c(\n                  \"text/csv\",\n                  \"text/comma-separated-values,text/plain\",\n                  \".csv\")\n      ),\n      tags$hr(),\n      checkboxInput(\"header\", \"Header\", TRUE)\n    ),\n\n    mainPanel(\n      DTOutput(\"table\")\n    )\n  )\n)\nserver &lt;- function(input, output) {\n  output$table &lt;- renderDT({\n    inFile &lt;- input$file\n\n    if (is.null(inFile)) {\n      return(NULL)\n    }\n\n    # Read the uploaded CSV\n    data &lt;- read.csv(inFile$datapath, header = input$header)\n\n    # Return the datatable\n    datatable(data, options = list(pageLength = 25))\n  })\n}\nshinyApp(ui, server)\nClick here to go back to the previous code book section."
  },
  {
    "objectID": "learn-more.html#using-github-copilot",
    "href": "learn-more.html#using-github-copilot",
    "title": "4¬† Learn more",
    "section": "4.1 Using Github Copilot",
    "text": "4.1 Using Github Copilot\n\nHow to use GitHub Copilot: Prompts, tips, and use cases\nHow to Use GitHub Copilot to Become a Happier and More Productive Developer\nHow to use GitHub Copilot: Prompts, tips, and use cases\nGetting started with GitHub Copilot"
  },
  {
    "objectID": "learn-more.html#using-dall-e-2",
    "href": "learn-more.html#using-dall-e-2",
    "title": "4¬† Learn more",
    "section": "4.2 Using DALL-E 2",
    "text": "4.2 Using DALL-E 2\n\nHow to use DALL¬∑E 2 to create AI images"
  },
  {
    "objectID": "learn-more.html#prompt-engineering",
    "href": "learn-more.html#prompt-engineering",
    "title": "4¬† Learn more",
    "section": "4.3 Prompt engineering",
    "text": "4.3 Prompt engineering\n\nPrompt Engineering Guide\nSix tips for better coding with ChatGPT\nHow to write an effective GPT-3 or GPT-4 prompt\nChatGPT Guide: Use these prompt strategies to maximize your results\nHamel‚Äôs notebooks from the deeplearning.ai course on Prompt Engineering\nOpenAI Cookbook\nGPT Best Practices from OpenAI\n\n\n4.3.1 Videos\n\nPrompt Engineering Tutorial ‚Äì Master ChatGPT and LLM Responses\nAndrew Ng: Opportunities in AI - 2023\n\n\n\n4.3.2 Simon Willison‚Äôs talks on LLMs\n\nCatching up on the weird world of LLMs\nMaking Large Language Models work for you"
  },
  {
    "objectID": "learn-more.html#how-chatgpt-works",
    "href": "learn-more.html#how-chatgpt-works",
    "title": "4¬† Learn more",
    "section": "4.4 How ChatGPT works",
    "text": "4.4 How ChatGPT works\n\nWhat Is ChatGPT Doing ‚Ä¶ and Why Does It Work?\nWhat are Large Language Models? What are they not?"
  },
  {
    "objectID": "intro.html#chatgpt",
    "href": "intro.html#chatgpt",
    "title": "1¬† Intro",
    "section": "1.1 ChatGPT",
    "text": "1.1 ChatGPT\nChatGPT is a large language model chatbot developed by OpenAI. It can be used for a multitude of tasks, such as:\n\nFollowing instructions and completing requests\nAnswering questions in an informative way, even if they are open-ended, challenging, or strange\nGenerating different creative text formats like poems, code, scripts, emails, or letters\n\nYou can augment ChatGPT via various plugins, which extend its capabilities to specialized tasks like coding assistance, real-time translation, and more.\nAs of 2023, ChatGPT has seen improvements in its conversational depth, allowing for more nuanced and context-aware responses. It has also expanded its range of plugins and added custom instructions, offering even more specialized functionalities (see be specific section of the considerations chapter for more on this). For example, in Sept 2023, OpenAI announced prompting with voice and images and DALL-E 3 integration for ChatGPT."
  },
  {
    "objectID": "intro.html#dalle-2",
    "href": "intro.html#dalle-2",
    "title": "1¬† Intro",
    "section": "1.2 DALLE 2",
    "text": "1.2 DALLE 2\nDALLE 2 is a text-to-image diffusion model developed by OpenAI. It can be used to create realistic images from text descriptions. DALLE 2 has been shown to be able to create high-quality images of a variety of objects and scenes."
  },
  {
    "objectID": "intro.html#bard",
    "href": "intro.html#bard",
    "title": "1¬† Intro",
    "section": "1.3 Bard",
    "text": "1.3 Bard\nBard is a large language model chatbot developed by Google AI. It is a powerful tool that can be used for a variety of tasks, including generating text, translating languages, and writing different kinds of creative content. It was developed by Google as a direct response to ChatGPT."
  },
  {
    "objectID": "intro.html#github-copilot",
    "href": "intro.html#github-copilot",
    "title": "1¬† Intro",
    "section": "1.4 Github Copilot",
    "text": "1.4 Github Copilot\nGithub Copilot is a code completion tool developed by GitHub and OpenAI. It uses a large language model to suggest code completions via ghost text as a user types. GitHub Copilot has also been shown to be able to suggest accurate and relevant code completions for a variety of programming languages. It works with code editors such as VSCode and Jetbrains IDEs.\nA Github Copilot Chat integration is also supported via a VSCode extension."
  },
  {
    "objectID": "intro.html#summary",
    "href": "intro.html#summary",
    "title": "1¬† Intro",
    "section": "1.5 Summary",
    "text": "1.5 Summary\nThese are just a few of the many AI assistance tools that are available. As AI technology continues to develop, we can expect to see even more powerful and sophisticated tools that can help developers with a variety of tasks."
  },
  {
    "objectID": "considerations.html#understanding",
    "href": "considerations.html#understanding",
    "title": "3¬† Considerations",
    "section": "3.1 Understanding",
    "text": "3.1 Understanding\nAI assistants shouldn‚Äôt replace good understanding of your code and selected programming language. Developers should be aware of common failures of systems they may be using. You should also be cautious about use of tools like ChatGPT to avoid learning."
  },
  {
    "objectID": "considerations.html#sensitive-data",
    "href": "considerations.html#sensitive-data",
    "title": "3¬† Considerations",
    "section": "3.2 Sensitive data",
    "text": "3.2 Sensitive data\nEnsure that you don‚Äôt provide AI code assistants such as ChatGPT or Github CoPilot with sensitive code or data. There have been many cases of employees pasting sensitive data, with some estimates of how common this is. Consider reading the privacy policy for the AI assistant that you‚Äôre using and ensure sensitive data is kept separate from such systems."
  },
  {
    "objectID": "considerations.html#plagiarism",
    "href": "considerations.html#plagiarism",
    "title": "3¬† Considerations",
    "section": "3.3 Plagiarism",
    "text": "3.3 Plagiarism\nConsider risk of unintentional plagiarism or copyright violation associated with overuse of tools like ChatGPT. The story of sumplete, numerous ongoing lawsuits, and numerous ethical issues show us that these tools should be used with care."
  },
  {
    "objectID": "considerations.html#trust-by-verify",
    "href": "considerations.html#trust-by-verify",
    "title": "3¬† Considerations",
    "section": "3.4 Trust by verify",
    "text": "3.4 Trust by verify\nJust because something sounds right, doesn‚Äôt mean it‚Äôs right. Sometimes AI tools provide incorrect answers, so it‚Äôs your responsibility to check the results, as recommended in Nature. Check if there are any bugs or hallucinations (such as functions that don‚Äôt exist) in code you obtain and confirm you understand what each lines is doing. For example, ChatGPT can often generate URLs that don‚Äôt exist. You can use AI tools to support this verification process but you should be an active part of it. Use unit testing and assertive programming to ensure results perform as expected in the cases you need to cover.\nBe aware that ChatGPT and Bard sometimes mess up basic calculations. For example, as of October 2023 the following prompt in Bard or ChatGPT will give you a wide variety of results (such as 56.60, 67.59, or 58.23 from my runs): 10.99 + 4.99 + 5.99 + 5.69 + 2.00 + 2.49 + 2.99 + 6.99 + 4.99 + 4.69 + 2.00 + 2.00 + 1.00 + 2.89 + 2.89 The correct solution is 62.59. LLMs are clearly bad at this. You can augment ChatGPT Plus with plugins such as the Wolfram Alpha or Advanced Data Analysis plugin to obtain the correct answer. However, you should still confirm that it lines up with your expectations and check your results if possible."
  },
  {
    "objectID": "considerations.html#iterate-on-it",
    "href": "considerations.html#iterate-on-it",
    "title": "3¬† Considerations",
    "section": "3.5 Iterate on it",
    "text": "3.5 Iterate on it\nAs noted in Nature, Sometimes you‚Äôll need to have a conversation with an AI tool to get what you want (this is called prompt chaining). You might even need to start all over again. It often doesn‚Äôt work on the first try. Try changing your approach. Consider changing settings for the tool you‚Äôre using like temperature in ChatGPT. Experiment with different prompts. Try using different tools."
  },
  {
    "objectID": "considerations.html#list-out-multiple-possibilities",
    "href": "considerations.html#list-out-multiple-possibilities",
    "title": "3¬† Considerations",
    "section": "3.6 List out multiple possibilities",
    "text": "3.6 List out multiple possibilities\nAsk the platform to list out multiple different options. You can specify how many results you want to be generated. You can serve as the curator deciding what is useful vs.¬†throwaway information."
  },
  {
    "objectID": "considerations.html#use-separators",
    "href": "considerations.html#use-separators",
    "title": "3¬† Considerations",
    "section": "3.7 Use separators",
    "text": "3.7 Use separators\nConsider using separators like quotation marks (\"\" or '') or backticks (``) to separate sections of text that should get treated differently in the prompt, as indicated from the-decoder."
  },
  {
    "objectID": "considerations.html#summarize-the-conversation",
    "href": "considerations.html#summarize-the-conversation",
    "title": "3¬† Considerations",
    "section": "3.8 Summarize the conversation",
    "text": "3.8 Summarize the conversation\nAsk the AI tools to summarize the conversation at completion. This can help recap the tasks accomplished and reflect on what could have been done better."
  },
  {
    "objectID": "considerations.html#keep-it-simple",
    "href": "considerations.html#keep-it-simple",
    "title": "3¬† Considerations",
    "section": "3.9 Keep it simple",
    "text": "3.9 Keep it simple\nBreak your problem into small pieces or tasks, as suggested in Nature. This is similar to the strategy you should use when working on any complex project. Keeping it simple is a good rule of thumb here. As mentioned before, prompt chaining or chained prompting can be used to solve more complex problems."
  },
  {
    "objectID": "considerations.html#be-specific",
    "href": "considerations.html#be-specific",
    "title": "3¬† Considerations",
    "section": "3.10 Be specific",
    "text": "3.10 Be specific\nBe a good designer and keep your prompts specific and clear. As part of that, you can include the response format or an example response you expect to receive. You could add a word limit or readability level (keep responses at a middle school level for example). You could mention the target audience, desired tone, or a persona the tool should adopt. There are a lot of these different response settings you can define to mold the responses. Some experimentation is required here, but that‚Äôs the fun part.\nTools such as ChatGPT also now have a setting called custom instructions. It allows you to specify a set of instructions that the model should follow for responses. The two main instructions you can specify, as of Sept 2023, are the following: - What would you like ChatGPT to know about you to provide better responses? - How would you like ChatGPT to respond?\nThese could be used to specify relevant background such as that you‚Äôre teaching a 3rd grade science class or that you are a Python programmer (these examples are mentioned in the documentation)."
  },
  {
    "objectID": "considerations.html#be-familiar-with-your-tool",
    "href": "considerations.html#be-familiar-with-your-tool",
    "title": "3¬† Considerations",
    "section": "3.11 Be familiar with your tool",
    "text": "3.11 Be familiar with your tool\nLearn how your AI tool‚Äôs features and any settings you can change. For example, Github Copilot uses a feature called neighboring tabs to contextualize recommendations according to other tabs open in the IDE. Therefore, you may need to keep tabs open with material that may be relevant to current work for the tool. You can also tweak keyboard shortcuts or other settings for tools Github Copilot. Customize these tools to your needs.\n\n3.11.1 Be aware of limitations\nYou should consider the training cutoff dates for the LLM models that you are using. The training cutoff date for OpenAI‚Äôs GPT-3.5 and GPT-4 models is September 2021. This may limit the ability include more recent information in chat results. Other platforms like Bing and Bard can have more recent results since they can search the internet. Note that there are token limits which vary depending on the model you are using. For example, the token limit for GPT-3.5 is 4096 tokens and over 8000 tokens for GPT-4. This means that you can only send 4096 tokens to the model at a time. This can be a problem if you are trying to send a lot of information through the conversation.\nAlso be aware that many of these LLMs do not disclose the training data used. This makes it unclear what it is probably good at answer and isn‚Äôt good at answering out of box.\nYou can augment ChatGPT via various plugins that are available such as one for Wolfram Alpha or Wikipedia.\n\n\n3.11.2 Beware of prompt injections\nPrompt injections are ways of crafting prompts that violate safeguards. They can be used to return biased, malicious, or sensitive information. This is a known issue with older versions of ChatGPT. You should be aware of this risk when creating apps that use LLMs."
  },
  {
    "objectID": "considerations.html#adhere-to-simon-willisons-personal-ai-ethics",
    "href": "considerations.html#adhere-to-simon-willisons-personal-ai-ethics",
    "title": "3¬† Considerations",
    "section": "3.12 Adhere to Simon Willison‚Äôs Personal AI Ethics",
    "text": "3.12 Adhere to Simon Willison‚Äôs Personal AI Ethics\nSimon Willison had a great talk in August 2023 called Making Large Language Models work for you. In the talk, he shared his personal AI ethical guidelines which include the following (watch the talk to learn why):\n\nDon‚Äôt publish anything that will take someone longer to read than it took you to write.\nNever commit code you can‚Äôt understand and explain every line of.\nShare your prompts and help spread knowledge of how to use these tools\nBe aware of the harm of these AI tools to believably mimic humans. Instead of responses that mimic humans, ask tools like ChatGPT to be a sentient cheesecake or a Shakespearean coal miner. The responses are safer, more entertaining, and stick better."
  },
  {
    "objectID": "considerations.html#s2c",
    "href": "considerations.html#s2c",
    "title": "3¬† Considerations",
    "section": "3.13 S2C",
    "text": "3.13 S2C\nFollow Tom Mock‚Äôs framework called S2C that he presented at posit::conf(2023) for Github Copilot prompting: Simple, Specific, and use Comments. This framework can be applied to any AI coding assistant.\nHere are some of the key points from the talk:\n\nBreakdown complex tasks by providing a high-level description of the project goal at the top level then build off that with more specific tasks.\nUse expressive names for variables, functions, and object.\nPrompt again or in a different way (as mentioned in the iterate on it section) if you don‚Äôt get the results you want.\nUse the generative loop to your advantage! Build off your own momentum by writing some of your own code. This can in turn help the AI tool understand what you‚Äôre trying to do and provide better results."
  },
  {
    "objectID": "considerations.html#summary",
    "href": "considerations.html#summary",
    "title": "3¬† Considerations",
    "section": "3.14 Summary",
    "text": "3.14 Summary\nIn this chapter, we explored a variety of suggestions when using AI code assistants. We covered the importance of understanding, sensitive data, plagiarism, trust but verify, iterating, listing out multiple possibilities, and many other helpful principles. I hope you found this chapter helpful and that you‚Äôll be able to use these principles to more safely use AI assistance tools."
  },
  {
    "objectID": "learn-more.html#the-future-with-llms",
    "href": "learn-more.html#the-future-with-llms",
    "title": "4¬† Learn more",
    "section": "4.5 The future with LLMs",
    "text": "4.5 The future with LLMs\n\nMalleable software in the age of LLMs\nLiterate Programming at the dawn of LLMs"
  }
]